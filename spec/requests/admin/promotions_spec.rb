require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/admin/products", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Product. As you add validations to Product, be sure to
  # adjust the attributes here as well.
  let(:product) { create(:product, price: 1000) }
  let(:valid_attributes) {
    {
      product_id: product.id,
      promotion_type: 'get_one_free',
      threshold: 2,
      rules: ""
    }
  }

  let(:invalid_attributes) {
    {
      product_id: product.id,
      promotion_type: 'get_one_free',
      threshold: 2,
      rules: "wrong json"
    }
  }
  let(:user) { create(:user, :admin) }

  before do
    sign_in user
  end

  describe "GET /index" do
    it "renders a successful response" do
      Promotion.create! valid_attributes
      get admin_promotions_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      promotion = Promotion.create! valid_attributes
      get admin_promotion_url(promotion)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_admin_promotion_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      promotion = Promotion.create! valid_attributes
      get edit_admin_promotion_url(promotion)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Promotion" do
        expect {
          post admin_promotions_url, params: { promotion: valid_attributes }
        }.to change(Promotion, :count).by(1)
      end

      it "redirects to the created promotion" do
        post admin_promotions_url, params: { promotion: valid_attributes }
        expect(response).to redirect_to(admin_promotions_url)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Promotion" do
        expect {
          post admin_promotions_url, params: { promotion: invalid_attributes }
        }.to change(Promotion, :count).by(0)
      end
    
      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post admin_promotions_url, params: { promotion: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          product_id: product.id,
          promotion_type: 'get_one_free',
          threshold: 3
        }
      }

      it "updates the requested promotion" do
        promotion = Promotion.create! valid_attributes
        patch admin_promotion_url(promotion), params: { promotion: new_attributes }
        promotion.reload
        expect(promotion.threshold).to eq(3)
      end

      it "redirects to the promotion" do
        promotion = Promotion.create! valid_attributes
        patch admin_promotion_url(promotion), params: { promotion: new_attributes }
        promotion.reload
        expect(response).to redirect_to(admin_promotions_url)
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        promotion = Promotion.create! valid_attributes
        patch admin_promotion_url(promotion), params: { promotion: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested promotion" do
      promotion = Promotion.create! valid_attributes
      expect {
        delete admin_promotion_url(promotion)
      }.to change(Promotion, :count).by(-1)
    end

    it "redirects to the promotions list" do
      promotion = Promotion.create! valid_attributes
      delete admin_promotion_url(promotion)
      expect(response).to redirect_to(admin_promotions_url)
    end
  end
end
